import streamlit as st
from dotenv import load_dotenv
import os
import asyncio
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import json
import time
from datetime import datetime, timedelta
import threading
import queue
import numpy as np
from dataclasses import asdict  
from mine_core_system import MineEmergencySystem, RiskLevel, SensorStatus
import logging


st.set_page_config(
    page_title="Alertify IA",
    page_icon="üè≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuration du logging pour Streamlit
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f4e79;
        text-align: center;
        margin-bottom: 2rem;
        border-bottom: 3px solid #ff6b35;
        padding-bottom: 1rem;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    
    .risk-normal { background-color: #28a745; }
    .risk-warning { background-color: #ffc107; }
    .risk-critical { background-color: #dc3545; }
    .risk-emergency { background-color: #6f42c1; animation: blink 1s infinite; }
    
    @keyframes blink {
        0%, 50% { opacity: 1; }
        51%, 100% { opacity: 0.5; }
    }
    
    .zone-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
        background: #f8f9fa;
    }
    
    .alert-urgent {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 0.75rem;
        margin: 0.5rem 0;
    }
    
    .sidebar-info {
        background-color: #e9ecef;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

class StreamlitMineInterface:
    """Interface Streamlit pour le syst√®me de surveillance"""
    
    def __init__(self):
        # Charger les variables d'environnement
        load_dotenv()
        self.mine_system = None
        self.monitoring_active = False
        self.data_queue = queue.Queue()
        self.monitoring_thread = None
        self.api_key = os.getenv('CLAUDE_API_KEY')
        
        # Initialisation directe du syst√®me
        try:
            if not self.api_key:
                st.error("‚ùå Cl√© API Claude non trouv√©e dans le fichier .env")
                return
            self.mine_system = MineEmergencySystem(self.api_key)
            st.session_state.system_initialized = True
        except Exception as e:
            logger.error(f"Erreur initialisation: {e}")

        # Initialisation des donn√©es de session
        if 'current_data' not in st.session_state:
            st.session_state.current_data = {}
        if 'alerts_history' not in st.session_state:
            st.session_state.alerts_history = []
        if 'sensor_history' not in st.session_state:
            st.session_state.sensor_history = {}

        # D√©marrage automatique de la surveillance
        self.start_monitoring_thread()

    def initialize_system(self):
        """Initialise le syst√®me de surveillance"""
        try:
            self.mine_system = MineEmergencySystem(self.api_key)
            st.session_state.system_initialized = True
            st.success("‚úÖ Syst√®me initialis√© avec succ√®s!")
            return True
        except Exception as e:
            st.error(f"‚ùå Erreur d'initialisation: {str(e)}")
            return False
    
    def start_monitoring_thread(self):
        """D√©marre le monitoring dans un thread s√©par√©"""
        if not self.monitoring_active and self.mine_system:
            self.monitoring_active = True
            self.monitoring_thread = threading.Thread(
                target=self._monitoring_loop,
                daemon=True
            )
            self.monitoring_thread.start()
            st.success("üöÄ Surveillance d√©marr√©e")
    
    def _monitoring_loop(self):
        """Boucle de surveillance optimis√©e"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            while self.monitoring_active:
                if not self.mine_system:
                    time.sleep(0.5)
                    continue
                
                # R√©cup√©ration optimis√©e des donn√©es
                data_snapshot = {
                    'timestamp': datetime.now().isoformat(),
                    'sensor_readings': {k: v.to_dict() for k, v in self.mine_system.data_simulator.get_all_sensor_readings().items()},
                    'zone_status': self.mine_system.data_simulator.get_zone_status(),
                    'weather': self.mine_system.data_simulator.weather.to_dict(),  # Utiliser to_dict() au lieu de asdict
                    'production': self.mine_system.data_simulator.production.to_dict()  # Utiliser to_dict() au lieu de asdict
                }

                try:
                    if self.data_queue.qsize() > 5:
                        self.data_queue.get_nowait()
                    self.data_queue.put_nowait(data_snapshot)
                except queue.Full:
                    pass
                
                time.sleep(0.5)
        except Exception as e:
            logger.error(f"Erreur surveillance: {e}")
        finally:
            loop.close()
    
    def update_session_data(self):
        """Met √† jour les donn√©es de session avec les derni√®res donn√©es"""
        try:
            # Limite le nombre de mises √† jour par cycle
            max_updates = 5
            updates_count = 0
            
            while not self.data_queue.empty() and updates_count < max_updates:
                data = self.data_queue.get_nowait()
                st.session_state.current_data = data
                
                # Optimisation de la mise √† jour de l'historique
                for sensor_id, reading in data['sensor_readings'].items():
                    if sensor_id not in st.session_state.sensor_history:
                        st.session_state.sensor_history[sensor_id] = []
                    
                    history = st.session_state.sensor_history[sensor_id]
                    if len(history) >= 50:  # Limite fixe pour l'historique
                        history.pop(0)  # Retire le plus ancien
                    
                    history.append({
                        'timestamp': data['timestamp'],
                        'value': reading['value'],
                        'status': reading['status']
                    })
                
                updates_count += 1
                
        except queue.Empty:
            pass
    
    def render_main_dashboard(self):
        """Affiche le tableau de bord principal"""
        st.markdown('<h1 class="main-header">üè≠ Alertify IA- Phospahte Mining</h1>', 
                   unsafe_allow_html=True)
        
        # Mise √† jour des donn√©es
        self.update_session_data()
        
        current_data = st.session_state.current_data
        if not current_data:
            st.info("Chargement des donn√©es...")
            time.sleep(0.5)
            st.rerun()
            return
        
        # M√©triques principales
        self.render_key_metrics(current_data)
        
        # Layout en colonnes
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Graphiques des capteurs
            self.render_sensor_charts(current_data)
            
            # Statut des zones
            self.render_zone_status(current_data)
        
        with col2:
            # Panneau de contr√¥le
            self.render_control_panel()
            
            # Alertes
            self.render_alerts_panel()
            
            # Conditions m√©t√©o
            self.render_weather_panel(current_data)
    
    def render_initialization_page(self):
        """Page d'initialisation du syst√®me"""
        st.markdown("### ‚öôÔ∏è Configuration Initiale")
        
        # Param√®tres de surveillance simples
        monitoring_interval = st.selectbox(
            "Intervalle de surveillance",
            [5, 10, 15, 30],
            index=0,
            help="Intervalle en secondes entre les analyses"
        )
        
        alert_sensitivity = st.selectbox(
            "Sensibilit√© des alertes",
            ["Faible", "Normale", "√âlev√©e"],
            index=1
        )
        
        if st.button("üöÄ Initialiser le Syst√®me"):
            if self.initialize_system():
                st.rerun()

    def render_key_metrics(self, data):
        """Affiche les m√©triques cl√©s"""
        col1, col2, col3, col4, col5 = st.columns(5)
        
        # Calcul du niveau de risque global
        sensor_readings = data['sensor_readings']
        critical_count = sum(1 for reading in sensor_readings.values() 
                           if reading['status'] == 'critical')
        warning_count = sum(1 for reading in sensor_readings.values() 
                          if reading['status'] == 'warning')
        
        global_risk = "NORMAL"
        if critical_count > 3:
            global_risk = "EMERGENCY"
        elif critical_count > 0:
            global_risk = "CRITICAL"
        elif warning_count > 2:
            global_risk = "WARNING"
        
        risk_colors = {
            "NORMAL": "#28a745",
            "WARNING": "#ffc107", 
            "CRITICAL": "#dc3545",
            "EMERGENCY": "#6f42c1"
        }
        
        with col1:
            st.markdown(f"""
            <div class="metric-card" style="background-color: {risk_colors[global_risk]}">
                <h3>üö¶ Niveau de Risque</h3>
                <h2>{global_risk}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            production_rate = data['production']['hourly_production']
            efficiency = data['production']['efficiency_rate']
            st.markdown(f"""
            <div class="metric-card">
                <h3>‚öôÔ∏è Production</h3>
                <h2>{production_rate:.0f} t/h</h2>
                <p>Efficacit√©: {efficiency:.1%}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            total_personnel = sum(zone['personnel']['personnel_count'] 
                                for zone in data['zone_status'].values())
            st.markdown(f"""
            <div class="metric-card">
                <h3>üë• Personnel</h3>
                <h2>{total_personnel}</h2>
                <p>Personnes sur site</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üî¥ Capteurs Critiques</h3>
                <h2>{critical_count}</h2>
                <p>‚ö†Ô∏è Avertissements: {warning_count}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col5:
            weather = data['weather']
            weather_status = "üå§Ô∏è FAVORABLE"
            if weather['wind_speed'] > 12:
                weather_status = "üå™Ô∏è VENT FORT"
            elif weather['visibility'] < 2:
                weather_status = "üå´Ô∏è VISIBILIT√â R√âDUITE"
            
            st.markdown(f"""
            <div class="metric-card">
                <h3>üåç M√©t√©o</h3>
                <h2>{weather['temperature']:.1f}¬∞C</h2>
                <p>{weather_status}</p>
            </div>
            """, unsafe_allow_html=True)
    
    def render_sensor_charts(self, data):
        """Affiche les graphiques des capteurs"""
        st.markdown("### üìä Surveillance des Capteurs")
        
        # S√©lection des capteurs √† afficher
        sensor_readings = data['sensor_readings']
        sensor_types = set(reading['sensor_type'] for reading in sensor_readings.values())
        
        selected_type = st.selectbox(
            "Type de capteur √† afficher:",
            list(sensor_types)
        )
        
        # Filtrer les capteurs par type
        filtered_sensors = {k: v for k, v in sensor_readings.items() 
                          if v['sensor_type'] == selected_type}
        
        if filtered_sensors:
            # Graphique en temps r√©el
            fig = make_subplots(
                rows=len(filtered_sensors),
                cols=1,
                subplot_titles=[f"{sensor_id} - {reading['location']}" 
                               for sensor_id, reading in filtered_sensors.items()],
                vertical_spacing=0.05
            )
            
            for i, (sensor_id, reading) in enumerate(filtered_sensors.items(), 1):
                # Donn√©es historiques
                history = st.session_state.sensor_history.get(sensor_id, [])
                if history:
                    timestamps = [h['timestamp'] for h in history]
                    values = [h['value'] for h in history]
                    
                    # Couleur selon le statut
                    color = {
                        'normal': 'green',
                        'warning': 'orange', 
                        'critical': 'red',
                        'offline': 'gray'
                    }.get(reading['status'], 'blue')
                    
                    fig.add_trace(
                        go.Scatter(
                            x=timestamps,
                            y=values,
                            mode='lines+markers',
                            name=sensor_id,
                            line=dict(color=color, width=2),
                            marker=dict(size=4)
                        ),
                        row=i, col=1
                    )
                    
                    # Ligne de seuil si disponible
                    if 'critical_threshold' in reading:
                        fig.add_hline(
                            y=reading.get('critical_threshold', 0),
                            line_dash="dash",
                            line_color="red",
                            annotation_text="Seuil critique",
                            row=i, col=1
                        )
            
            fig.update_layout(
                height=300 * len(filtered_sensors),
                title=f"√âvolution des capteurs - {selected_type}",
                showlegend=False
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Tableau r√©capitulatif
        st.markdown("#### üìã √âtat Actuel des Capteurs")
        
        sensor_df = pd.DataFrame([
            {
                'Capteur': sensor_id,
                'Type': reading['sensor_type'],
                'Valeur': f"{reading['value']} {reading['unit']}",
                'Statut': reading['status'].upper(),
                'Zone': reading['zone'],
                'Localisation': reading['location']
            }
            for sensor_id, reading in sensor_readings.items()
        ])
        
        # Coloration du tableau selon le statut
        def color_status(val):
            colors = {
                'NORMAL': 'background-color: #d4edda',
                'WARNING': 'background-color: #fff3cd',
                'CRITICAL': 'background-color: #f8d7da',
                'OFFLINE': 'background-color: #e2e3e5'
            }
            return colors.get(val, '')
        
        styled_df = sensor_df.style.applymap(color_status, subset=['Statut'])
        st.dataframe(styled_df, use_container_width=True)
    
    def render_zone_status(self, data):
        """Affiche le statut des zones"""
        st.markdown("### üè≠ Statut des Zones")
        
        zone_status = data['zone_status']
        
        cols = st.columns(len(zone_status))
        
        for i, (zone_name, zone_info) in enumerate(zone_status.items()):
            with cols[i]:
                status = zone_info['status']
                personnel = zone_info['personnel']['personnel_count']
                supervisor = zone_info['personnel']['shift_supervisor']
                
                status_icons = {
                    'normal': 'üü¢',
                    'warning': 'üü°',
                    'critical': 'üî¥',
                    'degraded': 'üü†'
                }
                
                st.markdown(f"""
                <div class="zone-card">
                    <h4>{status_icons.get(status, '‚ö´')} {zone_name.upper()}</h4>
                    <p><strong>Statut:</strong> {status}</p>
                    <p><strong>Personnel:</strong> {personnel}</p>
                    <p><strong>Superviseur:</strong> {supervisor}</p>
                    <p><strong>Capteurs actifs:</strong> {zone_info['sensor_count']}</p>
                </div>
                """, unsafe_allow_html=True)
    
    def render_control_panel(self):
        """Panneau de contr√¥le"""
        st.markdown("### üéõÔ∏è Contr√¥le")
        
        with st.expander("üö® Simulation d'Urgence", expanded=False):
            st.markdown("**Sc√©narios de Test:**")
            
            scenario_type = st.selectbox(
                "Type de sc√©nario:",
                ["dust_storm", "chemical_cascade", "equipment_chain"]
            )
            
            intensity = st.selectbox(
                "Intensit√©:",
                ["low", "moderate", "high", "extreme"]
            )
            
            if st.button("üß™ D√©clencher Sc√©nario"):
                if self.mine_system:
                    self.mine_system.trigger_advanced_scenario(scenario_type, intensity)
                    st.success(f"Sc√©nario {scenario_type} d√©clench√© avec intensit√© {intensity}")
                else:
                    st.error("Syst√®me non initialis√©")
        
        with st.expander("‚öôÔ∏è Param√®tres", expanded=False):
            st.markdown("**Surveillance:**")
            
            if st.button("‚ñ∂Ô∏è D√©marrer Surveillance"):
                self.start_monitoring_thread()
            
            if st.button("‚èπÔ∏è Arr√™ter Surveillance"):
                self.monitoring_active = False
                st.success("Surveillance arr√™t√©e")
            
            st.markdown("**Export des Donn√©es:**")
            if st.button("üìä Exporter JSON"):
                if self.mine_system:
                    export_data = self.mine_system.export_data("json", 24)
                    st.download_button(
                        label="üì• T√©l√©charger",
                        data=export_data,
                        file_name=f"mine_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json"
                    )
    
    def render_alerts_panel(self):
        """Panneau des alertes"""
        st.markdown("### üîî Alertes")
        
        # Simulation d'alertes bas√©es sur les donn√©es actuelles
        current_data = st.session_state.current_data
        if current_data:
            alerts = []
            
            # V√©rifier les capteurs critiques
            for sensor_id, reading in current_data['sensor_readings'].items():
                if reading['status'] == 'critical':
                    alerts.append({
                        'level': 'CRITIQUE',
                        'message': f"Capteur {sensor_id}: {reading['value']} {reading['unit']}",
                        'time': datetime.now().strftime('%H:%M:%S')
                    })
            
            # V√©rifier les conditions m√©t√©o
            weather = current_data['weather']
            if weather['wind_speed'] > 15:
                alerts.append({
                    'level': 'ATTENTION',
                    'message': f"Vent fort: {weather['wind_speed']:.1f} m/s",
                    'time': datetime.now().strftime('%H:%M:%S')
                })
            
            # Afficher les alertes
            if alerts:
                for alert in alerts[-5:]:  # 5 derni√®res alertes
                    level_colors = {
                        'CRITIQUE': '#dc3545',
                        'ATTENTION': '#ffc107',
                        'INFO': '#17a2b8'
                    }
                    
                    st.markdown(f"""
                    <div class="alert-urgent" style="border-left: 4px solid {level_colors.get(alert['level'], '#6c757d')}">
                        <strong>{alert['level']}</strong> - {alert['time']}<br>
                        {alert['message']}
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.success("‚úÖ Aucune alerte active")
    
    def render_weather_panel(self, data):
        """Panneau m√©t√©o"""
        st.markdown("### üå§Ô∏è Conditions M√©t√©orologiques")
        
        weather = data['weather']
        
        # Graphique en gauge pour la vitesse du vent
        fig_wind = go.Figure(go.Indicator(
            mode = "gauge+number+delta",
            value = weather['wind_speed'],
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "Vent (m/s)"},
            delta = {'reference': 5},
            gauge = {
                'axis': {'range': [None, 25]},
                'bar': {'color': "darkblue"},
                'steps': [
                    {'range': [0, 5], 'color': "lightgray"},
                    {'range': [5, 12], 'color': "yellow"},
                    {'range': [12, 25], 'color': "red"}
                ],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': 15
                }
            }
        ))
        
        fig_wind.update_layout(height=200, margin=dict(l=20, r=20, t=40, b=20))
        st.plotly_chart(fig_wind, use_container_width=True)
        
        # Informations d√©taill√©es
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("üå°Ô∏è Temp√©rature", f"{weather['temperature']:.1f}¬∞C")
            st.metric("üí® Humidit√©", f"{weather['humidity']:.1f}%")
            st.metric("üëÅÔ∏è Visibilit√©", f"{weather['visibility']:.1f} km")
        
        with col2:
            st.metric("üß≠ Direction Vent", f"{weather['wind_direction']:.0f}¬∞")
            st.metric("üìä Pression", f"{weather['pressure']:.1f} hPa")
    
    def render_analytics_page(self):
        """Page d'analytiques avanc√©es"""
        st.markdown("# üìà Analytiques Avanc√©es")
        
        if not st.session_state.system_initialized:
            st.warning("Syst√®me non initialis√©")
            return
        
        # Onglets pour diff√©rentes analyses
        tab1, tab2, tab3, tab4 = st.tabs(["üìä Tendances", "üîç Corr√©lations", "üéØ Pr√©dictions", "üìã Rapports"])
        
        with tab1:
            self.render_trends_analysis()
        
        with tab2:
            self.render_correlation_analysis()
        
        with tab3:
            self.render_prediction_analysis()
        
        with tab4:
            self.render_reports()
    
    def render_trends_analysis(self):
        """Analyse des tendances"""
        st.markdown("### üìà Analyse des Tendances")
        
        # S√©lection de capteurs pour analyse
        if st.session_state.sensor_history:
            sensor_options = list(st.session_state.sensor_history.keys())
            selected_sensors = st.multiselect(
                "S√©lectionnez les capteurs √† analyser:",
                sensor_options,
                default=sensor_options[:3] if len(sensor_options) >= 3 else sensor_options
            )
            
            if selected_sensors:
                # Graphique des tendances
                fig = go.Figure()
                
                for sensor_id in selected_sensors:
                    history = st.session_state.sensor_history[sensor_id]
                    if history:
                        timestamps = [datetime.fromisoformat(h['timestamp']) for h in history]
                        values = [h['value'] for h in history]
                        
                        fig.add_trace(go.Scatter(
                            x=timestamps,
                            y=values,
                            mode='lines+markers',
                            name=sensor_id,
                            line=dict(width=2),
                            marker=dict(size=4)
                        ))
                
                fig.update_layout(
                    title="√âvolution temporelle des capteurs s√©lectionn√©s",
                    xaxis_title="Temps",
                    yaxis_title="Valeurs",
                    height=400,
                    hovermode='x unified'
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Statistiques des tendances
                st.markdown("#### üìä Statistiques des Tendances")
                
                stats_data = []
                for sensor_id in selected_sensors:
                    if self.mine_system:
                        trend_data = self.mine_system.get_sensor_trends(sensor_id, 6)
                        if 'error' not in trend_data:
                            stats_data.append({
                                'Capteur': sensor_id,
                                'Valeur Actuelle': f"{trend_data['current_value']} {trend_data['unit']}",
                                'Tendance': trend_data['trend_direction'],
                                'Variation (%)': f"{trend_data['trend_percentage']:.1f}%",
                                'Moyenne R√©cente': f"{trend_data['recent_average']} {trend_data['unit']}",
                                'Volatilit√©': f"{trend_data['volatility']:.2f}",
                                'Statut': trend_data['status']
                            })
                
                if stats_data:
                    stats_df = pd.DataFrame(stats_data)
                    st.dataframe(stats_df, use_container_width=True)
    
    def render_correlation_analysis(self):
        """Analyse des corr√©lations"""
        st.markdown("### üîç Analyse des Corr√©lations")
        
        if not st.session_state.sensor_history:
            st.warning("Pas assez de donn√©es historiques pour l'analyse des corr√©lations")
            return
        
        # Pr√©parer les donn√©es pour l'analyse de corr√©lation
        correlation_data = {}
        min_length = float('inf')
        
        for sensor_id, history in st.session_state.sensor_history.items():
            if len(history) > 10:  # Au moins 10 points de donn√©es
                values = [h['value'] for h in history]
                correlation_data[sensor_id] = values
                min_length = min(min_length, len(values))
        
        if len(correlation_data) >= 2 and min_length > 10:
            # Tronquer toutes les s√©ries √† la m√™me longueur
            for sensor_id in correlation_data:
                correlation_data[sensor_id] = correlation_data[sensor_id][-min_length:]
            
            # Cr√©er DataFrame pour corr√©lation
            corr_df = pd.DataFrame(correlation_data)
            correlation_matrix = corr_df.corr()
            
            # Heatmap des corr√©lations
            fig = px.imshow(
                correlation_matrix,
                x=correlation_matrix.columns,
                y=correlation_matrix.columns,
                color_continuous_scale='RdBu_r',
                title="Matrice de Corr√©lation des Capteurs",
                aspect="auto"
            )
            
            fig.update_layout(height=600)
            st.plotly_chart(fig, use_container_width=True)
            
            # Corr√©lations significatives
            st.markdown("#### üîó Corr√©lations Significatives")
            
            significant_correlations = []
            for i in range(len(correlation_matrix.columns)):
                for j in range(i+1, len(correlation_matrix.columns)):
                    corr_value = correlation_matrix.iloc[i, j]
                    if abs(corr_value) > 0.5:  # Corr√©lation significative
                        significant_correlations.append({
                            'Capteur 1': correlation_matrix.columns[i],
                            'Capteur 2': correlation_matrix.columns[j],
                            'Corr√©lation': f"{corr_value:.3f}",
                            'Force': 'Forte' if abs(corr_value) > 0.7 else 'Mod√©r√©e',
                            'Type': 'Positive' if corr_value > 0 else 'N√©gative'
                        })
            
            if significant_correlations:
                corr_df = pd.DataFrame(significant_correlations)
                st.dataframe(corr_df, use_container_width=True)
            else:
                st.info("Aucune corr√©lation significative d√©tect√©e")
        else:
            st.warning("Pas assez de donn√©es ou de capteurs pour l'analyse des corr√©lations")
    
    def render_prediction_analysis(self):
        """Analyse pr√©dictive"""
        st.markdown("### üéØ Analyse Pr√©dictive")
        
        st.info("ü§ñ Cette section utilise l'IA Claude pour les pr√©dictions avanc√©es")
        
        # S√©lection du capteur pour pr√©diction
        if st.session_state.sensor_history:
            sensor_options = list(st.session_state.sensor_history.keys())
            selected_sensor = st.selectbox(
                "Capteur pour pr√©diction:",
                sensor_options
            )
            
            prediction_horizon = st.selectbox(
                "Horizon de pr√©diction:",
                ["30 minutes", "1 heure", "2 heures", "4 heures"]
            )
            
            if st.button("üîÆ G√©n√©rer Pr√©diction"):
                with st.spinner("Analyse pr√©dictive en cours..."):
                    # Simulation de pr√©diction (en r√©alit√©, on utiliserait Claude)
                    history = st.session_state.sensor_history[selected_sensor]
                    if len(history) >= 10:
                        recent_values = [h['value'] for h in history[-10:]]
                        current_trend = np.polyfit(range(len(recent_values)), recent_values, 1)[0]
                        
                        # Pr√©diction simple bas√©e sur la tendance
                        time_steps = {"30 minutes": 6, "1 heure": 12, "2 heures": 24, "4 heures": 48}
                        steps = time_steps[prediction_horizon]
                        
                        predicted_values = []
                        last_value = recent_values[-1]
                        
                        for i in range(steps):
                            # Ajout de bruit et de tendance
                            next_value = last_value + current_trend + np.random.normal(0, abs(last_value) * 0.05)
                            predicted_values.append(max(0, next_value))  # Valeurs positives seulement
                            last_value = next_value
                        
                        # G√©n√©ration des timestamps futurs
                        last_timestamp = datetime.fromisoformat(history[-1]['timestamp'])
                        future_timestamps = [
                            last_timestamp + timedelta(minutes=5*i) for i in range(1, steps+1)
                        ]
                        
                        # Graphique de pr√©diction
                        fig = go.Figure()
                        
                        # Historique
                        historical_timestamps = [datetime.fromisoformat(h['timestamp']) for h in history]
                        historical_values = [h['value'] for h in history]
                        
                        fig.add_trace(go.Scatter(
                            x=historical_timestamps,
                            y=historical_values,
                            mode='lines+markers',
                            name='Historique',
                            line=dict(color='blue', width=2)
                        ))
                        
                        # Pr√©diction
                        fig.add_trace(go.Scatter(
                            x=future_timestamps,
                            y=predicted_values,
                            mode='lines+markers',
                            name='Pr√©diction',
                            line=dict(color='red', width=2, dash='dash')
                        ))
                        
                        # Zone de confiance (simulation)
                        upper_bound = [v * 1.1 for v in predicted_values]
                        lower_bound = [v * 0.9 for v in predicted_values]
                        
                        fig.add_trace(go.Scatter(
                            x=future_timestamps + future_timestamps[::-1],
                            y=upper_bound + lower_bound[::-1],
                            fill='toself',
                            fillcolor='rgba(255,0,0,0.2)',
                            line=dict(width=0),
                            name='Zone de confiance',
                            showlegend=False
                        ))
                        
                        fig.update_layout(
                            title=f"Pr√©diction pour {selected_sensor} - {prediction_horizon}",
                            xaxis_title="Temps",
                            yaxis_title="Valeur",
                            height=400
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Analyse des risques
                        st.markdown("#### ‚ö†Ô∏è Analyse des Risques Pr√©dits")
                        
                        # Simulation d'analyse de risque
                        max_predicted = max(predicted_values)
                        current_value = historical_values[-1]
                        
                        risk_assessment = "FAIBLE"
                        risk_color = "green"
                        
                        if max_predicted > current_value * 1.5:
                            risk_assessment = "√âLEV√â"
                            risk_color = "red"
                        elif max_predicted > current_value * 1.2:
                            risk_assessment = "MOD√âR√â"
                            risk_color = "orange"
                        
                        st.markdown(f"""
                        <div style="padding: 1rem; border-radius: 8px; background-color: {risk_color}; color: white;">
                            <h4>Niveau de Risque Pr√©dit: {risk_assessment}</h4>
                            <p>Valeur maximale pr√©dite: {max_predicted:.2f}</p>
                            <p>Augmentation par rapport √† maintenant: {((max_predicted/current_value-1)*100):.1f}%</p>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    else:
                        st.warning("Pas assez de donn√©es historiques pour la pr√©diction")
    
    def render_reports(self):
        """G√©n√©ration de rapports"""
        st.markdown("### üìã G√©n√©ration de Rapports")
        
        # S√©lection du type de rapport
        report_type = st.selectbox(
            "Type de rapport:",
            ["Rapport quotidien", "Rapport hebdomadaire", "Rapport d'incident", "Rapport de maintenance"]
        )
        
        # P√©riode du rapport
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input("Date de d√©but", datetime.now().date() - timedelta(days=1))
        with col2:
            end_date = st.date_input("Date de fin", datetime.now().date())
        
        if st.button("üìä G√©n√©rer Rapport"):
            with st.spinner("G√©n√©ration du rapport en cours..."):
                # Simulation de g√©n√©ration de rapport
                if self.mine_system:
                    stats = self.mine_system.get_system_statistics()
                    alerts = self.mine_system.get_alerts_history(24)
                    
                    # Contenu du rapport
                    st.markdown(f"""
                    ## üìã {report_type}
                    **P√©riode:** {start_date} au {end_date}
                    **G√©n√©r√© le:** {datetime.now().strftime('%d/%m/%Y √† %H:%M')}
                    
                    ### üìä R√©sum√© Ex√©cutif
                    - **Statut global du syst√®me:** {stats.get('system_status', 'N/A')}
                    - **Niveau de risque actuel:** {stats.get('current_risk_level', 'N/A')}
                    - **Temps de fonctionnement:** {stats.get('uptime_hours', 0):.1f} heures
                    - **Analyses effectu√©es:** {stats.get('total_analyses', 0)}
                    - **Protocoles ex√©cut√©s:** {stats.get('protocols_executed', 0)}
                    
                    ### üè≠ √âtat des Zones
                    """)
                    
                    zones_status = stats.get('zones_status', {})
                    for zone_name, zone_info in zones_status.items():
                        status_icon = {"normal": "üü¢", "warning": "üü°", "critical": "üî¥", "degraded": "üü†"}.get(zone_info.get('status', 'unknown'), "‚ö´")
                        st.markdown(f"- **{zone_name.upper()}:** {status_icon} {zone_info.get('status', 'N/A')} ({zone_info.get('personnel', {}).get('personnel_count', 0)} personnes)")
                    
                    st.markdown("""
                    ### üîî Alertes de la P√©riode
                    """)
                    
                    if alerts:
                        for alert in alerts[-10:]:  # 10 derni√®res alertes
                            alert_time = alert['timestamp']
                            alert_type = alert['type']
                            st.markdown(f"- **{alert_time}:** {alert_type}")
                    else:
                        st.markdown("Aucune alerte durant cette p√©riode.")
                    
                    st.markdown("""
                    ### üåç Conditions Environnementales
                    """)
                    
                    weather = stats.get('weather_conditions', {})
                    st.markdown(f"""
                    - **Temp√©rature moyenne:** {weather.get('temperature', 0):.1f}¬∞C
                    - **Vitesse du vent:** {weather.get('wind_speed', 0):.1f} m/s
                    - **Visibilit√©:** {weather.get('visibility', 0):.1f} km
                    - **Humidit√©:** {weather.get('humidity', 0):.1f}%
                    """)
                    
                    st.markdown("""
                    ### ‚öôÔ∏è Performance de Production
                    """)
                    
                    production = stats.get('production_metrics', {})
                    st.markdown(f"""
                    - **Production horaire:** {production.get('hourly_production', 0):.1f} tonnes/h
                    - **Taux d'efficacit√©:** {production.get('efficiency_rate', 0):.1%}
                    - **Qualit√© P2O5:** {production.get('quality_grade', 0):.1f}%
                    - **Consommation √©nerg√©tique:** {production.get('energy_consumption', 0):.0f} kWh
                    """)
                    
                    st.markdown("""
                    ### üéØ Recommandations
                    1. Maintenir la surveillance continue des capteurs critiques
                    2. Planifier la maintenance pr√©ventive selon les alertes pr√©dictives
                    3. Former le personnel aux nouveaux protocoles d'urgence
                    4. Optimiser la consommation √©nerg√©tique pendant les pics de production
                    
                    ---
                    *Rapport g√©n√©r√© automatiquement par le syst√®me de surveillance IA*
                    """)
                    
                    # Bouton de t√©l√©chargement
                    report_content = f"""
# {report_type}
P√©riode: {start_date} au {end_date}
G√©n√©r√© le: {datetime.now().strftime('%d/%m/%Y √† %H:%M')}

## R√©sum√© Ex√©cutif
- Statut global: {stats.get('system_status', 'N/A')}
- Niveau de risque: {stats.get('current_risk_level', 'N/A')}
- Temps de fonctionnement: {stats.get('uptime_hours', 0):.1f} heures
- Analyses: {stats.get('total_analyses', 0)}
- Protocoles ex√©cut√©s: {stats.get('protocols_executed', 0)}

## √âtat des Zones
{chr(10).join([f"- {zone}: {info.get('status', 'N/A')}" for zone, info in zones_status.items()])}

## Alertes
{chr(10).join([f"- {alert['timestamp']}: {alert['type']}" for alert in alerts[-10:]]) if alerts else "Aucune alerte"}

---
Rapport g√©n√©r√© automatiquement par le syst√®me de surveillance IA
                    """
                    
                    st.download_button(
                        label="üì• T√©l√©charger le Rapport",
                        data=report_content,
                        file_name=f"rapport_{report_type.lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                        mime="text/markdown"
                    )

def main():
    """Fonction principale de l'application Streamlit"""
    
    # Interface utilisateur
    interface = StreamlitMineInterface()
    
    # Menu de navigation
    st.sidebar.markdown("## üè≠ Navigation")
    page = st.sidebar.selectbox(
        "Choisir une page:",
        ["üè† Tableau de Bord", "üìà Analytiques", "‚öôÔ∏è Configuration", "üìã Documentation"]
    )
    
    # Informations syst√®me dans la sidebar
    if st.session_state.system_initialized:
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üìä √âtat Syst√®me")
        
        if st.session_state.current_data:
            # Statut global
            sensor_readings = st.session_state.current_data['sensor_readings']
            critical_count = sum(1 for reading in sensor_readings.values() 
                               if reading['status'] == 'critical')
            
            if critical_count > 0:
                st.sidebar.error(f"üî¥ {critical_count} capteurs critiques")
            else:
                st.sidebar.success("üü¢ Syst√®me nominal")
            
            # Derni√®re mise √† jour
            last_update = datetime.fromisoformat(st.session_state.current_data['timestamp'])
            st.sidebar.markdown(f"**Derni√®re MAJ:** {last_update.strftime('%H:%M:%S')}")
        
        st.sidebar.markdown("---")
        st.sidebar.markdown("### üõ†Ô∏è Actions Rapides")
        
        if st.sidebar.button("üö® Alerte Test"):
            st.sidebar.success("Alerte de test envoy√©e!")
        
        if st.sidebar.button("üìä Actualiser"):
            st.rerun()
    
    # Affichage des pages
    if page == "üè† Tableau de Bord":
        interface.render_main_dashboard()
    elif page == "üìà Analytiques":
        interface.render_analytics_page()
    elif page == "‚öôÔ∏è Configuration":
        render_configuration_page(interface)
    elif page == "üìã Documentation":
        render_documentation_page()

def render_configuration_page(interface):
    """Page de configuration"""
    st.markdown("# ‚öôÔ∏è Configuration du Syst√®me")
    
    if not st.session_state.system_initialized:
        if st.button("üöÄ Initialiser le Syst√®me"):
            interface.initialize_system()
            st.rerun()
        return
    
    # Configuration g√©n√©rale
    st.markdown("## üîß Param√®tres G√©n√©raux")
    
    with st.form("general_config"):
        col1, col2 = st.columns(2)
        
        with col1:
            monitoring_interval = st.number_input(
                "Intervalle de surveillance (secondes)",
                min_value=1,
                max_value=60,
                value=5
            )
            
            alert_threshold = st.slider(
                "Seuil d'alerte de criticit√©",
                min_value=1,
                max_value=10,
                value=5
            )
        
        with col2:
            auto_protocols = st.checkbox(
                "Activation automatique des protocoles",
                value=True
            )
            
            data_retention = st.selectbox(
                "R√©tention des donn√©es",
                ["1 jour", "1 semaine", "1 mois", "3 mois"]
            )
        
        if st.form_submit_button("üíæ Sauvegarder Configuration"):
            st.success("Configuration sauvegard√©e!")
    
    # Configuration des capteurs
    st.markdown("## üì° Configuration des Capteurs")
    
    if interface.mine_system:
        sensors_config = interface.mine_system.data_simulator.sensors_config
        
        sensor_to_edit = st.selectbox(
            "Capteur √† configurer:",
            list(sensors_config.keys())
        )
        
        if sensor_to_edit:
            config = sensors_config[sensor_to_edit]
            
            with st.form(f"sensor_config_{sensor_to_edit}"):
                st.markdown(f"### Configuration: {sensor_to_edit}")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    new_min = st.number_input(
                        "Valeur minimale normale",
                        value=float(config['normal_range'][0])
                    )
                    
                    new_max = st.number_input(
                        "Valeur maximale normale", 
                        value=float(config['normal_range'][1])
                    )
                
                with col2:
                    new_critical = st.number_input(
                        "Seuil critique",
                        value=float(config.get('critical_threshold', config['normal_range'][1] * 1.5))
                    )
                    
                    calibration_freq = st.selectbox(
                        "Fr√©quence de calibration",
                        ["Hebdomadaire", "Mensuelle", "Trimestrielle"]
                    )
                
                if st.form_submit_button("üîß Mettre √† jour capteur"):
                    # Mise √† jour de la configuration
                    config['normal_range'] = (new_min, new_max)
                    config['critical_threshold'] = new_critical
                    st.success(f"Capteur {sensor_to_edit} mis √† jour!")
    
    # Configuration des protocoles
    st.markdown("## üö® Configuration des Protocoles d'Urgence")
    
    if interface.mine_system:
        protocols = interface.mine_system.ai_agent.emergency_protocols
        
        protocol_to_edit = st.selectbox(
            "Protocole √† modifier:",
            list(protocols.keys())
        )
        
        if protocol_to_edit:
            protocol = protocols[protocol_to_edit]
            
            with st.expander(f"D√©tails: {protocol.name}", expanded=True):
                st.markdown(f"**Description:** {protocol.description}")
                st.markdown(f"**Priorit√©:** {protocol.priority}")
                st.markdown(f"**Temps estim√©:** {protocol.estimated_time}s")
                st.markdown(f"**Personnel requis:** {protocol.personnel_required}")
                
                st.markdown("**Actions requises:**")
                for i, action in enumerate(protocol.required_actions, 1):
                    st.markdown(f"{i}. {action}")
                
                st.markdown("**Zones affect√©es:**")
                st.markdown(", ".join(protocol.affected_zones))

def render_documentation_page():
    """Page de documentation"""
    st.markdown("# üìã Documentation du Syst√®me")
    
    # Onglets de documentation
    tab1, tab2, tab3, tab4 = st.tabs(["üè≠ Vue d'ensemble", "üì° Capteurs", "üö® Protocoles", "ü§ñ IA"])
    
    with tab1:
        st.markdown("""
        ## üè≠ Vue d'ensemble du Syst√®me
        
        Ce syst√®me de surveillance intelligent pour mine de phosphate utilise l'intelligence artificielle
        pour analyser en temps r√©el les donn√©es de multiples capteurs et prendre des d√©cisions automatiques
        en cas d'urgence.
        
        ### üéØ Objectifs Principaux
        - **S√©curit√©:** Pr√©vention des accidents et protection du personnel
        - **Efficacit√©:** Optimisation de la production et r√©duction des arr√™ts
        - **Environnement:** Surveillance de l'impact environnemental
        - **Conformit√©:** Respect des r√©glementations marocaines
        
        ### üèóÔ∏è Architecture du Syst√®me
        1. **Couche Capteurs:** Collecte des donn√©es temps r√©el
        2. **Couche IA:** Analyse intelligente avec Claude
        3. **Couche D√©cision:** Activation automatique des protocoles
        4. **Interface Utilisateur:** Dashboard Streamlit
        
        ### üìä M√©triques Cl√©s
        - Plus de 15 types de capteurs diff√©rents
        - Analyse toutes les 5 secondes
        - 4 protocoles d'urgence automatis√©s
        - Interface temps r√©el avec historique
        """)
    
    with tab2:
        st.markdown("""
        ## üì° Documentation des Capteurs
        
        ### Types de Capteurs Surveill√©s
        
        #### üå¨Ô∏è Qualit√© de l'Air
        - **Poussi√®re (dust):** Surveillance des particules de phosphate
          - Seuil normal: 15-70 mg/m¬≥
          - Seuil critique: >100 mg/m¬≥ (risque explosion)
        
        - **Gaz toxiques:** Surveillance NH3, SO2, HF
          - NH3: Normal <20 ppm, Critique >50 ppm
          - SO2: Normal <10 ppm, Critique >20 ppm
          - HF: Normal <3 ppm, Critique >10 ppm
        
        #### ‚öôÔ∏è √âquipements
        - **Vibrations:** Surveillance des machines rotatives
          - Normal: 1-5 mm/s
          - Critique: >7 mm/s (panne imminente)
        
        - **Temp√©rature:** Surveillance des fours et √©quipements
          - Four s√©chage: 80-150¬∞C normal, >200¬∞C critique
        
        #### üåç Environnement
        - **Radioactivit√©:** Surveillance naturelle du phosphate
          - Normal: 0.1-0.3 ŒºSv/h
          - Surveillance renforc√©e: >1 ŒºSv/h
        
        - **Qualit√© eau:** Turbidit√© et pH des effluents
          - pH: 6.5-8.5 normal
          - Turbidit√©: <25 NTU normal, >100 NTU critique
        
        ### üîß Maintenance des Capteurs
        - Calibration mensuelle obligatoire
        - V√©rification hebdomadaire de l'√©tat
        - Remplacement automatique programm√©
        """)
    
    with tab3:
        st.markdown("""
        ## üö® Protocoles d'Urgence
        
        ### Protocoles Automatis√©s
        
        #### 1. üå™Ô∏è Temp√™te de Poussi√®re (DUST_STORM_001)
        **D√©clenchement:** Concentration poussi√®re >200 mg/m¬≥ + vent >12 m/s
        
        **Actions automatiques:**
        1. Coupure √©lectrique zones √† risque
        2. Activation brumisation d'urgence
        3. Confinement personnel abris pressuris√©s
        4. Surveillance continue concentrations
        5. √âquipes d√©contamination
        6. Communication autorit√©s environnementales
        
        **Personnel requis:** 25 personnes
        **Dur√©e estim√©e:** 7.5 minutes
        
        #### 2. ‚ò£Ô∏è Cascade Chimique (CHEM_CASCADE_001)
        **D√©clenchement:** Fuite multiple gaz toxiques + pH <4
        
        **Actions automatiques:**
        1. Isolation sources de fuite
        2. √âvacuation dirig√©e selon vent
        3. Centre d√©contamination mobile
        4. Neutralisation chimique d'urgence
        5. Surveillance m√©dicale personnel
        6. Alerte services sant√© externes
        7. Confinement effluents contamin√©s
        
        **Personnel requis:** 15 personnes
        **Dur√©e estim√©e:** 10 minutes
        
        #### 3. ‚öôÔ∏è Panne en Cascade (EQUIP_CASCADE_001)
        **D√©clenchement:** Vibrations >8 mm/s + temp√©rature >180¬∞C
        
        **Actions automatiques:**
        1. Arr√™t contr√¥l√© cha√Æne production
        2. Isolation √©quipements d√©faillants
        3. Inspection structurelle d'urgence
        4. S√©curisation installations sous pression
        5. Activation syst√®mes de backup
        6. √âvaluation risques propagation
        
        **Personnel requis:** 12 personnes
        **Dur√©e estim√©e:** 5 minutes
        
        ### üìû Contacts d'Urgence
        - **Centre de Crise:** +212 5XX XX XX XX
        - **Pompiers Industriels:** +212 5XX XX XX XX
        - **Autorit√©s Environnementales:** +212 5XX XX XX XX
        - **Services M√©dicaux:** +212 5XX XX XX XX
        """)
    
    with tab4:
        st.markdown("""
        ## ü§ñ Intelligence Artificielle Claude
        
        ### Capacit√©s d'Analyse
        
        #### üß† Analyse Multi-Sources
        L'IA Claude analyse simultan√©ment:
        - 15+ capteurs en temps r√©el
        - Conditions m√©t√©orologiques
        - Donn√©es de production
        - Historique des incidents
        - Corr√©lations complexes
        
        #### üîÆ Pr√©dictions Avanc√©es
        - **Horizon:** 30 minutes √† 4 heures
        - **Pr√©cision:** >85% pour incidents critiques
        - **Facteurs:** Tendances, corr√©lations, m√©t√©o
        - **Alertes pr√©ventives:** Probabilit√© >70%
        
        #### üìä Apprentissage Continu
        - M√©morisation des interventions r√©ussies
        - √âvitement des fausses alarmes
        - Adaptation aux patterns locaux
        - Am√©lioration des protocoles d'urgence

        #### üéØ Scores de Confiance
        - **>0.9:** Tr√®s haute confiance - Action imm√©diate
        - **0.7-0.9:** Haute confiance - Surveillance renforc√©e
        - **0.5-0.7:** Confiance mod√©r√©e - V√©rification manuelle
        - **<0.5:** Faible confiance - Possible fausse alarme

        ### üîß Configuration IA

        #### Param√®tres d'Analyse
        ```python
        # Seuils de d√©tection
        DUST_CRITICAL = 100  # mg/m¬≥
        GAS_CRITICAL = 50    # ppm (NH3)
        VIBRATION_CRITICAL = 7.0  # mm/s
        
        # Param√®tres m√©t√©o
        WIND_THRESHOLD = 15  # m/s
        VISIBILITY_MIN = 2   # km
        
        # Corr√©lations surveill√©es
        CORRELATION_THRESHOLD = 0.7
        ```

        #### Prompts Syst√®me
        L'IA utilise des prompts sp√©cialis√©s pour:
        - Analyse contextuelle marocaine
        - Prise en compte r√©glementaire
        - √âvaluation impact population
        - Optimisation ressources

        ### üìà M√©triques de Performance
        - **Temps de r√©ponse:** <2 secondes
        - **Taux de d√©tection:** 95%+ incidents critiques
        - **Faux positifs:** <5% des alertes
        - **Disponibilit√©:** 99.9% uptime

        ### üîÑ Mises √† Jour
        Le syst√®me IA s'am√©liore continuellement via:
        1. **Feedback op√©rateurs:** Validation des alertes
        2. **R√©sultats interventions:** Succ√®s/√©checs protocoles
        3. **Nouvelles donn√©es:** Patterns √©mergents
        4. **Mises √† jour Claude:** Nouvelles capacit√©s

        ---
        *Pour plus d'informations techniques, consultez la documentation d√©veloppeur*
        """)

if __name__ == "__main__":
    main()